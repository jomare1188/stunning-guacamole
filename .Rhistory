if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("tximport")
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("DESeq2")
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("DESeq2")
install.packages("XML")
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("DESeq2")
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("BiocVersion")
version
BiocManager::install("DESeq2")
if (!requireNamespace("BiocManager", quietly = TRUE))
a)
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("DESeq2")
BiocManager::install("DESeq2")
BiocManager::install("DESeq2")
BiocManager::install("DESeq2")
BiocManager::install("tximport")
exit()
q()
install.packages("readr", "dplyr", "magritter","DESeq2", "ggplot2")
install.packages(readr, dplyr, magritter,DESeq2, ggplot2)
install.packages(readr, dplyr, magritter,DESeq2, ggplot2)
install.packages("readr", "dplyASDAS "magritter","DESeq2", "ggplot2")
install.packages("readr")
BiocManager::version()
BiocManager::install(c("tximport","DESeq2", lib = "./")
)
library(dplyr)
library(dplyr)
library(c("readt", "dplyr", "magrittr", "tximport", "DESeq2", "ggplot"))
library(c("readt", "dplyr", "magrittr", "tximport", "DESeq2", "ggplot"))
library(c("readr", "dplyr", "magrittr", "tximport", "DESeq2", "ggplot"))
library(readr)
library(dplyr)
library(magrittr)
library(tximport)
library(DESeq2)
library(ggplot2)
# set working directory
setwd("./")
# load metadata
sample_table <-read.table("metadata_complete.csv", sep = ",", header = T)
# load files paths
sample_files = paste0(pull(sample_table , "Sample_file"), "/quant.sf")
# name table columns
names(sample_files) = pull(sample_table, "Sample_file")
# relate genes to transcripts
tx2gene = read.table("txgen2.txt", sep = "\t", col.names =c("genid","transid"))
# import count data to tximport
count_data = tximport( files = sample_files,
type = "salmon",
tx2gene =  tx2gene,
ignoreTxVersion = T)
# change "~ 1" to "~ condition"
# convert condition to a factor
sample_table$Condition <- as.factor((sample_table$Condition))
data <- DESeqDataSetFromTximport(txi = count_data,
colData = sample_table,
design = ~ Condition)
#
data <- estimateSizeFactors(data)
normalizationFactors(data)
counts(data, normalized = TRUE)
vst <- varianceStabilizingTransformation(data)
boxplot(assay(vst))
plotPCA(vst, intgroup ='Condition') +
theme_bw() +
theme( text = element_text(family = "Times New Roman", size=22),
panel.border = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.line = element_line(colour = "black") )
ggsave(filename = "./PCA_NRG.png",units = "cm",width = 20*1.3, height = 20,dpi = 320)
# set working directory
setwd("./")
# load metadata
sample_table <-read.table("metadata_complete.csv", sep = ",", header = T)
getwd()
# set working directory
setwd("/home/j/BIOINFORMATICA/test_RNAseq/")
s
# set working directory
setwd("/home/j/BIOINFORMATICA/test_RNAseq/")
# load metadata
sample_table <-read.table("metadata_complete.csv", sep = ",", header = T)
# load files paths
sample_files = paste0(pull(sample_table , "Sample_file"), "/quant.sf")
# name table columns
names(sample_files) = pull(sample_table, "Sample_file")
# relate genes to transcripts
tx2gene = read.table("txgen2.txt", sep = "\t", col.names =c("genid","transid"))
# import count data to tximport
count_data = tximport( files = sample_files,
type = "salmon",
tx2gene =  tx2gene,
ignoreTxVersion = T)
# change "~ 1" to "~ condition"
# convert condition to a factor
sample_table$Condition <- as.factor((sample_table$Condition))
data <- DESeqDataSetFromTximport(txi = count_data,
colData = sample_table,
design = ~ Condition)
#
data <- estimateSizeFactors(data)
normalizationFactors(data)
counts(data, normalized = TRUE)
vst <- varianceStabilizingTransformation(data)
boxplot(assay(vst))
plotPCA(vst, intgroup ='Condition') +
theme_bw() +
theme( text = element_text(family = "Times New Roman", size=22),
panel.border = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.line = element_line(colour = "black") )
ggsave(filename = "./PCA_NRG.png",units = "cm",width = 20*1.3, height = 20,dpi = 320)
BiocManager::install("RUVSeq")
